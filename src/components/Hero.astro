---
// This hero component features a clean, interactive text-swapping animation
// built into the original, correct typographic layout.
const wordMap = [
    { initial: "SECURING", swapped: "HIDDEN" },
    { initial: "WHAT OTHERS", swapped: "IN PLAIN" },
    { initial: "MISS.", swapped: "SIGHT." }
];
---
<section id="hero-section" class="relative min-h-screen w-full flex flex-col justify-center p-6 md:p-8">
    <div id="hero-interactive-area" class="relative w-full max-w-7xl mx-auto" style="height: 70vh;">

        <!-- Centered Typographic Layout Container -->
        <div class="absolute inset-0 flex items-center justify-center">
            <!-- Mobile Layout: Stacked and Centered -->
            <div class="md:hidden text-center">
                <h1 class="word-fader text-[16vw] font-bold tracking-tighter leading-none">
                    <span class="text-span initial-text">{wordMap[0].initial}</span>
                    <span class="text-span swapped-text">{wordMap[0].swapped}</span>
                </h1>
                <h1 class="word-fader text-[16vw] font-bold tracking-tighter leading-none">
                    <span class="text-span initial-text">{wordMap[1].initial}</span>
                    <span class="text-span swapped-text">{wordMap[1].swapped}</span>
                </h1>
                <h1 class="word-fader text-[16vw] font-bold tracking-tighter leading-none">
                    <span class="text-span initial-text">{wordMap[2].initial}</span>
                    <span class="text-span swapped-text">{wordMap[2].swapped}</span>
                </h1>
            </div>

            <!-- Desktop Layout: Grid -->
            <div class="hidden md:grid grid-cols-2 grid-rows-2 w-full max-w-6xl gap-x-4 md:gap-x-8">
                <h1 class="word-fader col-start-1 row-start-1 text-[12vw] md:text-[10vw] lg:text-[8vw] font-bold tracking-tighter leading-none">
                    <span class="text-span initial-text">{wordMap[0].initial}</span>
                    <span class="text-span swapped-text">{wordMap[0].swapped}</span>
                </h1>
                <h1 class="word-fader col-start-2 row-start-1 row-span-2 self-center text-right text-[12vw] md:text-[10vw] lg:text-[8vw] font-bold tracking-tighter leading-none">
                    <span class="text-span initial-text">{wordMap[1].initial}</span>
                    <span class="text-span swapped-text">{wordMap[1].swapped}</span>
                </h1>
                <h1 class="word-fader col-start-1 row-start-2 self-end text-[12vw] md:text-[10vw] lg:text-[8vw] font-bold tracking-tighter leading-none">
                    <span class="text-span initial-text">{wordMap[2].initial}</span>
                    <span class="text-span swapped-text">{wordMap[2].swapped}</span>
                </h1>
            </div>
        </div>

        <!-- Corner Info -->
        <div class="absolute top-0 left-0 text-xs uppercase max-w-[140px] md:max-w-[200px]">
            <p>Specializing in Hardware, Physical, and Human-Factor Security</p>
        </div>
        <div class="absolute bottom-0 left-0 text-xs uppercase">
            <p>Based in Subang Jaya, Malaysia</p>
        </div>
        <div class="absolute bottom-0 right-0 text-xs uppercase">
            <p>Â© 2025</p>
        </div>
    </div>
</section>

<style>
.word-fader {
    position: relative; /* Establishes a positioning context for the spans */
}
.text-span {
    display: block;
    transition: opacity 0.4s ease-in-out;
}
.initial-text {
    opacity: 1;
}
.swapped-text {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0; /* Hidden by default */
}

/* The .is-swapped class triggers the fade animation */
.word-fader.is-swapped .initial-text {
    opacity: 0;
}
.word-fader.is-swapped .swapped-text {
    opacity: 1;
}
</style>

<script>
function initHeroTextSwap() {
    const heroArea = document.getElementById('hero-interactive-area');
    const wordFaders = heroArea.querySelectorAll('.word-fader');
    if (!heroArea || !wordFaders.length) return;

    // A more reliable way to check for touch devices.
    const isMobile = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

    if (isMobile) {
        // On mobile, swap all words on a single tap of the entire hero area.
        let isSwapped = false;
        const mobileTapHandler = () => {
            isSwapped = !isSwapped;
            wordFaders.forEach(fader => {
                fader.classList.toggle('is-swapped', isSwapped);
            });
        };
        // Use 'click' as it works for both tap and mouse, ensuring functionality.
        heroArea.addEventListener('click', mobileTapHandler);

        // Cleanup function for Astro's View Transitions
        document.addEventListener('astro:before-swap', () => {
            heroArea.removeEventListener('click', mobileTapHandler);
        }, { once: true });

    } else {
        // On desktop, swap individual words on hover.
        wordFaders.forEach(fader => {
            const mouseEnterHandler = () => fader.classList.add('is-swapped');
            const mouseLeaveHandler = () => fader.classList.remove('is-swapped');
            
            fader.addEventListener('mouseenter', mouseEnterHandler);
            fader.addEventListener('mouseleave', mouseLeaveHandler);

            // Cleanup function for Astro's View Transitions
            document.addEventListener('astro:before-swap', () => {
                fader.removeEventListener('mouseenter', mouseEnterHandler);
                fader.removeEventListener('mouseleave', mouseLeaveHandler);
            }, { once: true });
        });
    }
}
// Run the script on initial load and after every page transition.
document.addEventListener('astro:page-load', initHeroTextSwap);
</script>